// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    likes      Likes[]
    comment    Comment[]
    media      Media  @relation(fields: [mediaId], references: [id])
    mediaId    Int    @unique
    caption    String
}

model Media {
    id        Int     @id @default(autoincrement())
    url       String  @unique
    createdBy   User  @relation(fields: [createdById], references: [id])
    createdById String
    post Post?
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    username      String?   @unique
    bio           String? 
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    followers     Follow[] @relation("Follower")
    following     Follow[] @relation("Following")
    likes         Likes[]
    comments      Comment[]
    commentLikes  CommentLikes[]
    media         Media[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Follow {
    id        Int      @id @default(autoincrement())
    follower  User     @relation("Follower", fields: [followerId], references: [id])
    followerId String
    following User     @relation("Following", fields: [followingId], references: [id])
    followingId String

    @@unique([followerId, followingId])
}

model Likes {
    id        Int      @id @default(autoincrement())
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    Int
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    @@unique([postId, userId])
}

model Comment {
    id        Int      @id @default(autoincrement())
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    Int
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    comment   String
    createdAt DateTime @default(now())
    commentLikes CommentLikes[]
}

model CommentLikes {
    id        Int      @id @default(autoincrement())
    comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId Int
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    @@unique([commentId, userId])
}